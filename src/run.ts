import pLimit from "p-limit";
import { env } from "./config.js";
import { loadCompanies } from "./xml.js";
import { normalizeXmlWorkingTime } from "./normalize.js";
import { compareSchedules } from "./compare.js";
import { searchCandidates, pickBest } from "./yandex.js";
import { loadMapping, saveMapping, saveLastRun } from "./cache.js";

export async function runOnce() {
    const companies = await loadCompanies();
    console.log(`\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ XML: ${companies.length}`);

    const map = await loadMapping(env.CACHE_JSON);
    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏–∑ –∫–µ—à–∞: ${Object.keys(map).length}`);

    const diffs: any[] = [];
    const limit = pLimit(env.YMAPS_CONCURRENCY);

    let processed = 0;
    const tasks = companies.map((c) =>
        limit(async () => {
            processed++;
            console.log(`\n${"=".repeat(80)}`);
            console.log(`[${processed}/${companies.length}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${c.companyId}`);
            console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${c.name}`);
            console.log(`–ê–¥—Ä–µ—Å: ${c.address}`);
            console.log(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${c.lat}, ${c.lon}`);
            console.log(`–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${c.workingTime}`);

            const xmlSched = normalizeXmlWorkingTime(c.workingTime);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π ID ‚Äî –≤ —Ä–µ–∞–ª—å–Ω–æ–º API –º–æ–∂–Ω–æ –¥–æ–±–∏—Ä–∞—Ç—å –∏–º —Ç–æ—á–∫—É. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            const cands = await searchCandidates({
                lat: c.lat,
                lon: c.lon,
                address: c.address,
                queryName: c.name,
            });
            const best = pickBest(cands, c.lat, c.lon);
            if (!best) {
                console.log(`\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∞ –∫–∞—Ä—Ç–∞—Ö`);
                diffs.push({
                    companyId: c.companyId,
                    name: c.name,
                    address: c.address,
                    expected: summarizeXml(xmlSched),
                    actual: "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö",
                });
                return;
            }

            console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö: "${best.name}"`);
            console.log(`   –ê–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö: ${best.address}`);
            console.log(`   –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${best.hoursText || "(–Ω–µ —É–∫–∞–∑–∞–Ω—ã)"}`);
            console.log(`   URL: ${best.url || "(–Ω–µ—Ç)"}`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            if (!map[c.companyId] && best.id) map[c.companyId] = String(best.id);

            const res = compareSchedules(xmlSched, { text: best.hoursText, avail: best.hoursAvail }, env.TIME_TOLERANCE_MINUTES);
            if (!res.ok) {
                console.log(`\n‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö —Ä–∞–±–æ—Ç—ã!`);
                console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${res.targetText}`);
                console.log(`   –ù–∞ –∫–∞—Ä—Ç–∞—Ö: ${res.actualText || "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"}`);
                diffs.push({
                    companyId: c.companyId,
                    name: c.name,
                    address: c.address,
                    expected: res.targetText!,
                    actual: res.actualText,
                    url: best.url,
                });
            } else {
                console.log(`\n‚úÖ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
            }
        })
    );

    await Promise.all(tasks);

    console.log(`\n${"=".repeat(80)}`);
    console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${companies.length}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö: ${companies.length - diffs.filter((d) => d.actual === "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö").length}`);
    console.log(`   –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö: ${diffs.filter((d) => d.actual === "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö").length}`);
    console.log(`   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ —á–∞—Å–∞—Ö: ${diffs.filter((d) => d.actual !== "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö").length}`);
    console.log(`   –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${diffs.length}`);

    await saveMapping(env.CACHE_JSON, map);
    await saveLastRun(env.LAST_RUN_LOG, {
        ts: Date.now(),
        total: companies.length,
        diffs: diffs.length,
    });

    return { total: companies.length, diffs };
}

function summarizeXml(xml: ReturnType<typeof normalizeXmlWorkingTime>) {
    if (xml.is24x7) return "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ";
    const days = Object.values(xml.byDay).filter(Boolean);
    if (!days.length) return "(–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ)";
    const [sample] = days[0]!;
    return `–µ–∂–µ–¥–Ω–µ–≤–Ω–æ ${sample.from}-${sample.to}`;
}
